// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kvstore.proto

#include "kvstore.pb.h"
#include "kvstore.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kvstore {

static const char* KVStore_method_names[] = {
  "/kvstore.KVStore/GET",
  "/kvstore.KVStore/PUT",
  "/kvstore.KVStore/DEL",
};

std::unique_ptr< KVStore::Stub> KVStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KVStore::Stub> stub(new KVStore::Stub(channel, options));
  return stub;
}

KVStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GET_(KVStore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PUT_(KVStore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DEL_(KVStore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KVStore::Stub::GET(::grpc::ClientContext* context, const ::kvstore::GetRequest& request, ::kvstore::CommonReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kvstore::GetRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GET_, context, request, response);
}

void KVStore::Stub::async::GET(::grpc::ClientContext* context, const ::kvstore::GetRequest* request, ::kvstore::CommonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kvstore::GetRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GET_, context, request, response, std::move(f));
}

void KVStore::Stub::async::GET(::grpc::ClientContext* context, const ::kvstore::GetRequest* request, ::kvstore::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GET_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommonReply>* KVStore::Stub::PrepareAsyncGETRaw(::grpc::ClientContext* context, const ::kvstore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kvstore::CommonReply, ::kvstore::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GET_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommonReply>* KVStore::Stub::AsyncGETRaw(::grpc::ClientContext* context, const ::kvstore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGETRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVStore::Stub::PUT(::grpc::ClientContext* context, const ::kvstore::PutRequest& request, ::kvstore::CommonReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kvstore::PutRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PUT_, context, request, response);
}

void KVStore::Stub::async::PUT(::grpc::ClientContext* context, const ::kvstore::PutRequest* request, ::kvstore::CommonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kvstore::PutRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PUT_, context, request, response, std::move(f));
}

void KVStore::Stub::async::PUT(::grpc::ClientContext* context, const ::kvstore::PutRequest* request, ::kvstore::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PUT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommonReply>* KVStore::Stub::PrepareAsyncPUTRaw(::grpc::ClientContext* context, const ::kvstore::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kvstore::CommonReply, ::kvstore::PutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PUT_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommonReply>* KVStore::Stub::AsyncPUTRaw(::grpc::ClientContext* context, const ::kvstore::PutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPUTRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVStore::Stub::DEL(::grpc::ClientContext* context, const ::kvstore::DeleteRequest& request, ::kvstore::CommonReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kvstore::DeleteRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DEL_, context, request, response);
}

void KVStore::Stub::async::DEL(::grpc::ClientContext* context, const ::kvstore::DeleteRequest* request, ::kvstore::CommonReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kvstore::DeleteRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DEL_, context, request, response, std::move(f));
}

void KVStore::Stub::async::DEL(::grpc::ClientContext* context, const ::kvstore::DeleteRequest* request, ::kvstore::CommonReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DEL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommonReply>* KVStore::Stub::PrepareAsyncDELRaw(::grpc::ClientContext* context, const ::kvstore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kvstore::CommonReply, ::kvstore::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DEL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kvstore::CommonReply>* KVStore::Stub::AsyncDELRaw(::grpc::ClientContext* context, const ::kvstore::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDELRaw(context, request, cq);
  result->StartCall();
  return result;
}

KVStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::GetRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kvstore::GetRequest* req,
             ::kvstore::CommonReply* resp) {
               return service->GET(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::PutRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kvstore::PutRequest* req,
             ::kvstore::CommonReply* resp) {
               return service->PUT(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVStore_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVStore::Service, ::kvstore::DeleteRequest, ::kvstore::CommonReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kvstore::DeleteRequest* req,
             ::kvstore::CommonReply* resp) {
               return service->DEL(ctx, req, resp);
             }, this)));
}

KVStore::Service::~Service() {
}

::grpc::Status KVStore::Service::GET(::grpc::ServerContext* context, const ::kvstore::GetRequest* request, ::kvstore::CommonReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStore::Service::PUT(::grpc::ServerContext* context, const ::kvstore::PutRequest* request, ::kvstore::CommonReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVStore::Service::DEL(::grpc::ServerContext* context, const ::kvstore::DeleteRequest* request, ::kvstore::CommonReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kvstore

